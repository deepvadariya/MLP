retsest paper set-1
Section: A

1. Create a NumPy array from a list?

import numpy as np

my_list = [1, 2, 3, 4, 5]
my_array = np.array(my_list)

print(my_array)

---------------------------------------------------------------------------------------------------------

2. Print the maximum and minimum value in above NumPy array?

import numpy as np

my_list = [1, 2, 3, 4, 5]
my_array = np.array(my_list)

print("Maximum value:", np.amax(my_array))
print("Minimum value:", np.amin(my_array))

---------------------------------------------------------------------------------------------------------

3. Create a pandas dataframe from the python dictionary.

import pandas as pd

my_dict = {'name': ['Alice', 'Bob', 'Charlie', 'Dave'],
           'age': [25, 30, 35, 40],
           'country': ['USA', 'Canada', 'UK', 'Australia']}

my_df = pd.DataFrame(my_dict)

print(my_df)

---------------------------------------------------------------------------------------------------------

4. Delete one column from the above dataframe.

import pandas as pd

my_dict = {'name': ['Alice', 'Bob', 'Charlie', 'Dave'],
           'age': [25, 30, 35, 40],
           'country': ['USA', 'Canada', 'UK', 'Australia']}

my_df = pd.DataFrame(my_dict)

my_df = my_df.drop('country', axis=1)

print(my_df)

---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
Section: B

1. Load the fracture.csv data into pandas dataframe and print first 15 record..

import pandas as pd

my_df = pd.read_csv('fracture.csv')

print(my_df.head(15))

---------------------------------------------------------------------------------------------------------

2. Add new column named “bmi” to store Body Mass Index for each record. Formula to calculate BMI is: weight_kg / (height_cm/100)^2.

import pandas as pd

my_df = pd.read_csv('fracture.csv')

# Calculate BMI and add new column to dataframe
my_df['bmi'] = my_df['weight_kg'] / (my_df['height_cm']/100) ** 2

print(my_df.head(15))

---------------------------------------------------------------------------------------------------------

3. Split the data set in to test and train.

import pandas as pd
from sklearn.model_selection import train_test_split

my_df = pd.read_csv('fracture.csv')

# Calculate BMI and add new column to dataframe
my_df['bmi'] = my_df['weight_kg'] / (my_df['height_cm']/100) ** 2

# Split the dataset into training and test sets
train_df, test_df = train_test_split(my_df, test_size=0.2, random_state=42)

print("Training dataset:")
print(train_df.head())

print("Test dataset:")
print(test_df.head())

---------------------------------------------------------------------------------------------------------

4. Build a logistic regression model to predict the fracture considering age, sex, bmi and bmd.

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load the dataset
my_df = pd.read_csv('fracture.csv')

# Calculate BMI and add new column to dataframe
my_df['bmi'] = my_df['weight_kg'] / (my_df['height_cm']/100) ** 2

# Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(my_df[['age', 'sex', 'bmi', 'bmd']], my_df['fracture'], test_size=0.2, random_state=42)

# Fit the logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Calculate accuracy score
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

---------------------------------------------------------------------------------------------------------

5. Apply the model on to the test and train data. Plot the outcomes of prediction using appropriate graph.

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

# Make predictions on the test set
y_pred_test = model.predict(X_test)

# Make predictions on the train set
y_pred_train = model.predict(X_train)

# Create confusion matrices for test and train sets
cm_test = confusion_matrix(y_test, y_pred_test)
cm_train = confusion_matrix(y_train, y_pred_train)

# Create a function to plot confusion matrix
def plot_cm(cm, title):
    sns.set(font_scale=1.4) # Adjust to fit plot labels
    ax = sns.heatmap(cm, annot=True, annot_kws={"size": 16}, fmt='g',
                     cmap="Blues", cbar=False, square=True)
    ax.set_xlabel('Predicted', fontsize=20)
    ax.set_ylabel('True', fontsize=20)
    ax.set_title(title, fontsize=24)

# Plot confusion matrix for test set
plot_cm(cm_test, 'Confusion matrix for test set')

# Plot confusion matrix for train set
plot_cm(cm_train, 'Confusion matrix for train set')

plt.show()

---------------------------------------------------------------------------------------------------------

6. Calculate accuracy of the model using confusion matix.

# Calculate accuracy for test set
accuracy_test = (cm_test[0][0] + cm_test[1][1]) / sum(sum(cm_test))
print("Accuracy for test set:", accuracy_test)

# Calculate accuracy for train set
accuracy_train = (cm_train[0][0] + cm_train[1][1]) / sum(sum(cm_train))
print("Accuracy for train set:", accuracy_train)