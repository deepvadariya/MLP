Section: A

1. Create a 5* 5 NumPy array values between 0 to 9.?

import numpy as np

arr = np.random.randint(10, size=(5, 5))
print(arr)

------------------------------------------------------------------------------------------

2. Print the data type of element of the array?

import numpy as np

arr = np.random.randint(10, size=(5, 5))
print(arr.dtype)

------------------------------------------------------------------------------------------

3. Create a pandas dataframe from the python dictionary.

import pandas as pd

data = {'Name': ['John', 'Alice', 'Bob', 'Emily'],
        'Age': [25, 30, 27, 28],
        'Gender': ['Male', 'Female', 'Male', 'Female'],
        'Salary': [50000, 60000, 55000, 65000]}

df = pd.DataFrame(data)
print(df)

------------------------------------------------------------------------------------------

4. Add one more column in the above dataframe.

import pandas as pd

data = {'Name': ['John', 'Alice', 'Bob', 'Emily'],
        'Age': [25, 30, 27, 28],
        'Gender': ['Male', 'Female', 'Male', 'Female'],
        'Salary': [50000, 60000, 55000, 65000]}

df = pd.DataFrame(data)

df['Department'] = ['Sales', 'Marketing', 'Finance', 'IT']
print(df)

------------------------------------------------------------------------------------------

Section: B

1. Load the fracture.csv data into pandas dataframe.
import pandas as pd

df = pd.read_csv('fracture.csv')
print(df)

------------------------------------------------------------------------------------------

2. Add new column named “bmi” to store Body Mass Index for each record.Formula to calculate BMI is: weight_kg / (height_cm/100)^2

import pandas as pd

# Load the fracture.csv data into a Pandas DataFrame
df = pd.read_csv('fracture.csv')

# Add a new column called 'bmi' to store the Body Mass Index for each record
df['bmi'] = df['weight_kg'] / (df['height_cm'] / 100) ** 2

# Print the updated DataFrame
print(df)

------------------------------------------------------------------------------------------

3. Split the data set in to test and train in 30:70 ratio.

import pandas as pd
from sklearn.model_selection import train_test_split

# Load the fracture.csv data into a Pandas DataFrame
df = pd.read_csv('fracture.csv')

# Split the dataset into training and testing sets in a 30:70 ratio
train_df, test_df = train_test_split(df, test_size=0.7, random_state=42)

# Print the number of records in the training and testing sets
print(f"Number of records in training set: {len(train_df)}")
print(f"Number of records in testing set: {len(test_df)}")

------------------------------------------------------------------------------------------

4. Build a Naive Bias model to predict the fracture considering age, sex,bmi and bmd.

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

# Load the fracture.csv data into a Pandas DataFrame
df = pd.read_csv('fracture.csv')

# Add a new column called 'bmi' to store the Body Mass Index for each record
df['bmi'] = df['weight_kg'] / (df['height_cm'] / 100) ** 2

# Split the dataset into training and testing sets in a 30:70 ratio
X = df[['age', 'sex', 'bmi', 'bmd']]
y = df['fracture']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.7, random_state=42)

# Train a Naive Bayes model using GaussianNB
model = GaussianNB()
model.fit(X_train, y_train)

# Predict fractures on the testing set
y_pred = model.predict(X_test)

# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of Naive Bayes model: {accuracy}")

------------------------------------------------------------------------------------------

5. Apply the model on to the test and train data. Plot the outcomes ofprediction using appropriate graph.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix

# Load the fracture.csv data into a Pandas DataFrame
df = pd.read_csv('fracture.csv')

# Add a new column called 'bmi' to store the Body Mass Index for each record
df['bmi'] = df['weight_kg'] / (df['height_cm'] / 100) ** 2

# Split the dataset into training and testing sets in a 30:70 ratio
X = df[['age', 'sex', 'bmi', 'bmd']]
y = df['fracture']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.7, random_state=42)

# Train a Naive Bayes model using GaussianNB
model = GaussianNB()
model.fit(X_train, y_train)

# Predict fractures on the training set and testing set
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# Calculate the accuracy of the model on the training set and testing set
train_accuracy = accuracy_score(y_train, y_train_pred)
test_accuracy = accuracy_score(y_test, y_test_pred)
print(f"Accuracy of Naive Bayes model on training set: {train_accuracy}")
print(f"Accuracy of Naive Bayes model on testing set: {test_accuracy}")

# Create confusion matrix for the testing set
cm = confusion_matrix(y_test, y_test_pred)
print("Confusion matrix for testing set:")
print(cm)

# Plot confusion matrix using a heatmap
sns.heatmap(cm, annot=True, cmap="Blues")
plt.xlabel("Predicted labels")
plt.ylabel("True labels")
plt.title("Confusion Matrix")
plt.show()

------------------------------------------------------------------------------------------

6. Calculate accuracy of the model using confusion matix.

# Calculate the accuracy of the model using the confusion matrix
tn, fp, fn, tp = cm.ravel()
accuracy = (tp + tn) / (tp + tn + fp + fn)
print(f"Accuracy of Naive Bayes model: {accuracy}")